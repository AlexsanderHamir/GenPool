File: pool.test
Type: cpu
Time: 2025-07-10 14:55:34 PDT
Duration: 37.23s, Total samples = 211.90s (569.19%)
Showing nodes accounting for 211.90s, 100% of 211.90s total
      flat  flat%   sum%        cum   cum%
         0     0%     0%    124.20s 58.61%  testing.(*B).RunParallel.func1
     0.05s 0.024% 0.024%    123.60s 58.33%  github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkGenPool.func1
    15.66s  7.39%  7.41%    122.91s 58.00%  github.com/AlexsanderHamir/GenPool/pool_test.highLatencyWorkload
     5.26s  2.48%  9.90%    105.04s 49.57%  math/rand/v2.N[go.shape.uint8] (inline)
    31.13s 14.69% 24.59%     99.75s 47.07%  math/rand/v2.(*Rand).uint64n
    26.91s 12.70% 37.29%     68.45s 32.30%  math/rand/v2.(*Rand).Uint64 (inline)
    55.74s 26.30% 63.59%     55.74s 26.30%  internal/chacha8rand.block
     3.13s  1.48% 65.07%     41.35s 19.51%  math/rand/v2.runtimeSource.Uint64
    15.97s  7.54% 72.61%     38.21s 18.03%  runtime.rand
     0.01s 0.0047% 72.61%     18.40s  8.68%  runtime.systemstack
    16.42s  7.75% 80.36%     16.42s  7.75%  internal/chacha8rand.(*State).Next (inline)
     0.02s 0.0094% 80.37%     15.91s  7.51%  runtime.(*mheap).allocSpan
    15.40s  7.27% 87.64%     15.40s  7.27%  runtime.madvise
         0     0% 87.64%     15.33s  7.23%  runtime.sysUsed (inline)
         0     0% 87.64%     15.33s  7.23%  runtime.sysUsedOS (inline)
         0     0% 87.64%     14.97s  7.06%  runtime.(*mheap).alloc.func1
         0     0% 87.64%     11.62s  5.48%  runtime.mcall
     0.07s 0.033% 87.67%     11.37s  5.37%  runtime.schedule
     0.04s 0.019% 87.69%     10.16s  4.79%  runtime.findRunnable
         0     0% 87.69%      9.17s  4.33%  runtime.park_m
     8.42s  3.97% 91.66%      8.42s  3.97%  runtime.usleep
     5.01s  2.36% 94.03%      5.82s  2.75%  internal/chacha8rand.(*State).Refill
     0.17s  0.08% 94.11%      5.69s  2.69%  runtime.lock2
         0     0% 94.11%      5.69s  2.69%  runtime.lockWithRank (inline)
     0.01s 0.0047% 94.11%      5.43s  2.56%  runtime.lock (partial-inline)
         0     0% 94.11%      5.29s  2.50%  runtime.osyield (inline)
         0     0% 94.11%      3.42s  1.61%  runtime.stealWork
         0     0% 94.11%      3.30s  1.56%  runtime.newstack
     0.01s 0.0047% 94.12%      3.24s  1.53%  runtime.morestack
         0     0% 94.12%      3.13s  1.48%  runtime.runqgrab
         0     0% 94.12%      3.13s  1.48%  runtime.runqsteal
         0     0% 94.12%      2.27s  1.07%  runtime.goexit0
         0     0% 94.12%      2.25s  1.06%  runtime.goschedImpl
     0.07s 0.033% 94.15%      2.23s  1.05%  runtime.wakep
     0.06s 0.028% 94.18%      2.14s  1.01%  runtime.(*timers).check
         0     0% 94.18%      2.08s  0.98%  runtime.gopreempt_m (partial-inline)
         0     0% 94.18%      2.04s  0.96%  runtime.semasleep
     2.03s  0.96% 95.13%      2.03s  0.96%  runtime.pthread_cond_wait
         0     0% 95.13%      1.88s  0.89%  runtime.stopm
         0     0% 95.13%      1.84s  0.87%  runtime.preemptM
     1.84s  0.87% 96.00%      1.84s  0.87%  runtime.pthread_kill
         0     0% 96.00%      1.84s  0.87%  runtime.signalM (inline)
         0     0% 96.00%      1.80s  0.85%  runtime.mPark (inline)
         0     0% 96.00%      1.80s  0.85%  runtime.notesleep
     0.03s 0.014% 96.02%      1.74s  0.82%  runtime.(*timers).run
     0.01s 0.0047% 96.02%      1.71s  0.81%  runtime.growslice
     0.01s 0.0047% 96.03%      1.63s  0.77%  runtime.gcBgMarkWorker.func2
     0.02s 0.0094% 96.04%      1.61s  0.76%  runtime.gcDrain
     0.06s 0.028% 96.06%      1.60s  0.76%  runtime.(*timer).unlockAndRun
         0     0% 96.06%      1.50s  0.71%  runtime.semawakeup
     1.48s   0.7% 96.76%      1.48s   0.7%  runtime.pthread_cond_signal
         0     0% 96.76%      1.47s  0.69%  runtime.gcDrainMarkWorkerDedicated (inline)
     1.38s  0.65% 97.41%      1.38s  0.65%  runtime.kevent
     0.14s 0.066% 97.48%      1.36s  0.64%  runtime.ready
     0.04s 0.019% 97.50%      1.35s  0.64%  runtime.mallocgc
         0     0% 97.50%      1.35s  0.64%  runtime.netpoll
         0     0% 97.50%      1.32s  0.62%  runtime.notewakeup
         0     0% 97.50%      1.28s   0.6%  runtime.goready (inline)
         0     0% 97.50%      1.28s   0.6%  runtime.startm
     0.02s 0.0094% 97.51%      1.27s   0.6%  runtime.goroutineReady
         0     0% 97.51%      1.25s  0.59%  runtime.goroutineReady.goready.func1
         0     0% 97.51%      1.15s  0.54%  runtime.preemptone
         0     0% 97.51%      1.14s  0.54%  runtime.(*mheap).allocManual
     0.03s 0.014% 97.52%      1.14s  0.54%  runtime.markroot
         0     0% 97.52%      1.13s  0.53%  runtime.stackalloc
         0     0% 97.52%      1.13s  0.53%  runtime.stackcacherefill
         0     0% 97.52%      1.12s  0.53%  runtime.copystack
         0     0% 97.52%      1.10s  0.52%  runtime.markroot.func1
     0.01s 0.0047% 97.53%      1.06s   0.5%  runtime.stackpoolalloc
         0     0% 97.53%      1.02s  0.48%  runtime.resetspinning
     0.98s  0.46% 97.99%      0.98s  0.46%  runtime.memclrNoHeapPointers
     0.02s 0.0094% 98.00%      0.83s  0.39%  runtime.newobject
         0     0% 98.00%      0.82s  0.39%  runtime.deductAssistCredit
     0.04s 0.019% 98.02%      0.82s  0.39%  runtime.gcAssistAlloc
         0     0% 98.02%      0.69s  0.33%  runtime.suspendG
         0     0% 98.02%      0.67s  0.32%  runtime.gcAssistAlloc.func2
     0.02s 0.0094% 98.03%      0.67s  0.32%  runtime.gcAssistAlloc1
     0.01s 0.0047% 98.03%      0.62s  0.29%  runtime.(*gcControllerState).enlistWorker
     0.01s 0.0047% 98.04%      0.61s  0.29%  runtime.gcDrainN
         0     0% 98.04%      0.55s  0.26%  runtime.gcBgMarkWorker
         0     0% 98.04%      0.54s  0.25%  runtime.preemptall
         0     0% 98.04%      0.53s  0.25%  runtime.gcstopm
     0.01s 0.0047% 98.04%      0.50s  0.24%  runtime.(*gcWork).balance
     0.49s  0.23% 98.27%      0.49s  0.23%  runtime.asyncPreempt
     0.04s 0.019% 98.29%      0.48s  0.23%  github.com/AlexsanderHamir/GenPool/pool.(*ShardedPool[go.shape.struct { Name string; Data []uint8; github.com/AlexsanderHamir/GenPool/pool_test._ [24]uint8; PoolFields = github.com/AlexsanderHamir/GenPool/pool.PoolFields[github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject] },go.shape.*github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject]).Get
         0     0% 98.29%      0.48s  0.23%  runtime.runSafePointFn
     0.14s 0.066% 98.36%      0.43s   0.2%  runtime.scanobject
         0     0% 98.36%      0.41s  0.19%  runtime.(*timers).lock (inline)
     0.01s 0.0047% 98.36%      0.41s  0.19%  runtime.mallocgcSmallNoscan
         0     0% 98.36%      0.41s  0.19%  runtime.scanstack
     0.16s 0.076% 98.44%      0.41s  0.19%  time.Sleep
     0.01s 0.0047% 98.44%      0.34s  0.16%  runtime.forEachPInternal
     0.02s 0.0094% 98.45%      0.33s  0.16%  runtime.(*timer).modify
         0     0% 98.45%      0.33s  0.16%  runtime.(*timer).reset (inline)
         0     0% 98.45%      0.33s  0.16%  runtime.gcMarkDone.forEachP.func5
         0     0% 98.45%      0.33s  0.16%  runtime.resetForSleep
         0     0% 98.45%      0.29s  0.14%  runtime.scanframeworker
         0     0% 98.45%      0.29s  0.14%  runtime.unlock (partial-inline)
     0.09s 0.042% 98.49%      0.29s  0.14%  runtime.unlock2
         0     0% 98.49%      0.29s  0.14%  runtime.unlockWithRank (inline)
         0     0% 98.49%      0.28s  0.13%  runtime.gcMarkDone
     0.01s 0.0047% 98.50%      0.26s  0.12%  runtime.(*timer).maybeAdd
         0     0% 98.50%      0.24s  0.11%  runtime.semacquire (inline)
     0.01s 0.0047% 98.50%      0.24s  0.11%  runtime.semacquire1
         0     0% 98.50%      0.23s  0.11%  runtime.(*mcache).nextFree
         0     0% 98.50%      0.23s  0.11%  runtime.(*mcache).refill
         0     0% 98.50%      0.23s  0.11%  runtime.stopTheWorldWithSema
         0     0% 98.50%      0.22s   0.1%  github.com/AlexsanderHamir/GenPool/pool_test.allocator
         0     0% 98.50%      0.20s 0.094%  runtime.(*mcentral).cacheSpan
         0     0% 98.50%      0.20s 0.094%  runtime.(*mheap).reclaim
         0     0% 98.50%      0.20s 0.094%  runtime.gcStart.func2
         0     0% 98.50%      0.20s 0.094%  runtime.nanotime (inline)
     0.18s 0.085% 98.59%      0.20s 0.094%  runtime.nanotime1
     0.08s 0.038% 98.63%      0.20s 0.094%  runtime.wbBufFlush1
     0.02s 0.0094% 98.64%      0.18s 0.085%  runtime.(*timer).updateHeap
     0.18s 0.085% 98.72%      0.18s 0.085%  runtime.memmove
     0.01s 0.0047% 98.73%      0.18s 0.085%  runtime.newproc.func1
         0     0% 98.73%      0.18s 0.085%  runtime.unlock2Wake
         0     0% 98.73%      0.18s 0.085%  runtime.wbBufFlush.func1
     0.03s 0.014% 98.74%      0.17s  0.08%  github.com/AlexsanderHamir/GenPool/pool.(*ShardedPool[go.shape.struct { Name string; Data []uint8; github.com/AlexsanderHamir/GenPool/pool_test._ [24]uint8; PoolFields = github.com/AlexsanderHamir/GenPool/pool.PoolFields[github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject] },go.shape.*github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject]).retrieveFromShard
         0     0% 98.74%      0.17s  0.08%  runtime.gosched_m
     0.01s 0.0047% 98.74%      0.17s  0.08%  runtime.scanblock
         0     0% 98.74%      0.17s  0.08%  runtime.wbBufFlush
         0     0% 98.74%      0.16s 0.076%  runtime.(*timers).deleteMin
     0.12s 0.057% 98.80%      0.16s 0.076%  runtime.casgstatus
     0.01s 0.0047% 98.81%      0.16s 0.076%  runtime.getempty
     0.05s 0.024% 98.83%      0.16s 0.076%  runtime.greyobject
     0.10s 0.047% 98.88%      0.15s 0.071%  runtime.gopark
         0     0% 98.88%      0.15s 0.071%  sync/atomic.(*Pointer[go.shape.struct { Name string; Data []uint8; github.com/AlexsanderHamir/GenPool/pool_test._ [24]uint8; PoolFields = github.com/AlexsanderHamir/GenPool/pool.PoolFields[github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject] }]).CompareAndSwap (inline)
     0.11s 0.052% 98.93%      0.15s 0.071%  sync/atomic.CompareAndSwapPointer
     0.04s 0.019% 98.95%      0.14s 0.066%  gcWriteBarrier
         0     0% 98.95%      0.14s 0.066%  runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func2
     0.04s 0.019% 98.97%      0.14s 0.066%  runtime.findObject
         0     0% 98.97%      0.14s 0.066%  runtime.gcDrainMarkWorkerIdle (inline)
         0     0% 98.97%      0.14s 0.066%  runtime.gdestroy
     0.13s 0.061% 99.03%      0.13s 0.061%  internal/runtime/atomic.(*Uint8).Load (inline)
     0.02s 0.0094% 99.04%      0.13s 0.061%  runtime.(*mcentral).grow
         0     0% 99.04%      0.12s 0.057%  runtime.(*sweepLocked).sweep
     0.08s 0.038% 99.08%      0.12s 0.057%  runtime.(*timers).siftDown
     0.01s 0.0047% 99.08%      0.12s 0.057%  runtime.gfput
         0     0% 99.08%      0.11s 0.052%  runtime.(*gcWork).put
         0     0% 99.08%      0.11s 0.052%  runtime.(*mheap).alloc
     0.01s 0.0047% 99.08%      0.11s 0.052%  runtime.gcParkAssist
     0.01s 0.0047% 99.09%      0.11s 0.052%  runtime.newproc1
         0     0% 99.09%      0.11s 0.052%  runtime.readyWithTime.goready.func1
         0     0% 99.09%      0.11s 0.052%  runtime.stackcacherelease
         0     0% 99.09%      0.11s 0.052%  runtime.stackfree
     0.04s 0.019% 99.11%      0.10s 0.047%  runtime.execute
         0     0% 99.11%      0.10s 0.047%  runtime.preemptPark
         0     0% 99.11%      0.09s 0.042%  runtime.getempty.func1
         0     0% 99.11%      0.09s 0.042%  runtime.semrelease (inline)
         0     0% 99.11%      0.09s 0.042%  runtime.semrelease1
     0.06s 0.028% 99.14%      0.09s 0.042%  runtime.typePointers.next
     0.04s 0.019% 99.16%      0.08s 0.038%  github.com/AlexsanderHamir/GenPool/pool.(*ShardedPool[go.shape.struct { Name string; Data []uint8; github.com/AlexsanderHamir/GenPool/pool_test._ [24]uint8; PoolFields = github.com/AlexsanderHamir/GenPool/pool.PoolFields[github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject] },go.shape.*github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject]).Put
     0.02s 0.0094% 99.16%      0.08s 0.038%  runtime.(*stkframe).getStackMap
     0.06s 0.028% 99.19%      0.08s 0.038%  runtime.(*unwinder).resolveInternal
     0.01s 0.0047% 99.20%      0.08s 0.038%  runtime.gfget
     0.06s 0.028% 99.23%      0.08s 0.038%  runtime.mallocgcSmallScanNoHeader
         0     0% 99.23%      0.08s 0.038%  runtime.profilealloc
     0.06s 0.028% 99.25%      0.08s 0.038%  runtime.traceAcquire (inline)
     0.08s 0.038% 99.29%      0.08s 0.038%  testing.(*PB).Next (inline)
     0.07s 0.033% 99.33%      0.07s 0.033%  runtime.(*lfstack).pop (inline)
         0     0% 99.33%      0.07s 0.033%  runtime.(*pageAlloc).scavenge.func1
         0     0% 99.33%      0.07s 0.033%  runtime.(*pageAlloc).scavengeOne
     0.01s 0.0047% 99.33%      0.07s 0.033%  runtime.(*stackScanState).addObject
         0     0% 99.33%      0.07s 0.033%  runtime.gcStart
         0     0% 99.33%      0.07s 0.033%  runtime.mProf_Malloc
         0     0% 99.33%      0.07s 0.033%  runtime.sysUnused (inline)
         0     0% 99.33%      0.07s 0.033%  runtime.sysUnusedOS (inline)
     0.06s 0.028% 99.36%      0.06s 0.028%  gogo
     0.02s 0.0094% 99.37%      0.06s 0.028%  runtime.(*mheap).reclaimChunk
     0.06s 0.028% 99.40%      0.06s 0.028%  runtime.(*mspan).base (inline)
         0     0% 99.40%      0.06s 0.028%  runtime.(*stackScanState).putPtr
     0.06s 0.028% 99.42%      0.06s 0.028%  runtime.(*timers).cleanHead
         0     0% 99.42%      0.06s 0.028%  runtime.(*unwinder).init (inline)
         0     0% 99.42%      0.06s 0.028%  runtime.(*unwinder).initAt
     0.02s 0.0094% 99.43%      0.06s 0.028%  runtime.pcdatavalue
     0.03s 0.014% 99.45%      0.06s 0.028%  runtime.pcvalue
     0.01s 0.0047% 99.45%      0.06s 0.028%  runtime.sweepone
         0     0% 99.45%      0.05s 0.024%  github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkGenPool
     0.05s 0.024% 99.48%      0.05s 0.024%  internal/runtime/atomic.(*UnsafePointer).Load (inline)
         0     0% 99.48%      0.05s 0.024%  runtime.(*gcWork).putBatch
         0     0% 99.48%      0.05s 0.024%  runtime.(*mheap).freeSpan (inline)
         0     0% 99.48%      0.05s 0.024%  runtime.(*timers).addHeap
         0     0% 99.48%      0.05s 0.024%  runtime.bgsweep
         0     0% 99.48%      0.05s 0.024%  runtime.gfget.func2
     0.01s 0.0047% 99.48%      0.05s 0.024%  runtime.newMarkBits
         0     0% 99.48%      0.05s 0.024%  runtime.newproc
         0     0% 99.48%      0.05s 0.024%  runtime.parkunlock_c
         0     0% 99.48%      0.05s 0.024%  runtime.stkbucket
     0.05s 0.024% 99.50%      0.05s 0.024%  runtime.typePointers.nextFast (inline)
         0     0% 99.50%      0.05s 0.024%  testing.(*B).RunParallel
         0     0% 99.50%      0.05s 0.024%  testing.(*B).runN
     0.04s 0.019% 99.52%      0.04s 0.019%  github.com/AlexsanderHamir/GenPool/pool.(*ShardedPool[go.shape.struct { Name string; Data []uint8; github.com/AlexsanderHamir/GenPool/pool_test._ [24]uint8; PoolFields = github.com/AlexsanderHamir/GenPool/pool.PoolFields[github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject] },go.shape.*github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject]).getShard
         0     0% 99.52%      0.04s 0.019%  runtime.(*mcentral).uncacheSpan
         0     0% 99.52%      0.04s 0.019%  runtime.(*spanSet).push
         0     0% 99.52%      0.04s 0.019%  runtime.(*timer).unlock (inline)
         0     0% 99.52%      0.04s 0.019%  runtime.(*timers).unlock (inline)
     0.04s 0.019% 99.54%      0.04s 0.019%  runtime.acquirem (inline)
     0.01s 0.0047% 99.55%      0.04s 0.019%  runtime.atomicwb
     0.04s 0.019% 99.57%      0.04s 0.019%  runtime.releasem (inline)
     0.04s 0.019% 99.58%      0.04s 0.019%  runtime.spanOf (inline)
         0     0% 99.58%      0.04s 0.019%  testing.(*B).launch
     0.01s 0.0047% 99.59%      0.03s 0.014%  internal/runtime/atomic.(*Bool).Load (inline)
     0.03s 0.014% 99.60%      0.03s 0.014%  internal/runtime/atomic.(*Int32).CompareAndSwap (inline)
     0.03s 0.014% 99.62%      0.03s 0.014%  internal/runtime/atomic.(*Uint32).CompareAndSwap (inline)
     0.01s 0.0047% 99.62%      0.03s 0.014%  runtime.(*gcControllerState).findRunnableGCWorker
     0.03s 0.014% 99.64%      0.03s 0.014%  runtime.(*gcWork).tryGetFast (inline)
         0     0% 99.64%      0.03s 0.014%  runtime.(*mcache).prepareForSweep
     0.03s 0.014% 99.65%      0.03s 0.014%  runtime.(*timers).siftUp
         0     0% 99.65%      0.03s 0.014%  runtime.(*unwinder).next
     0.01s 0.0047% 99.66%      0.03s 0.014%  runtime.(*wbBuf).get2 (inline)
         0     0% 99.66%      0.03s 0.014%  runtime.acquirep
         0     0% 99.66%      0.03s 0.014%  runtime.gcMarkDone.func2
         0     0% 99.66%      0.03s 0.014%  runtime.handoff
         0     0% 99.66%      0.03s 0.014%  runtime.netpollBreak (inline)
     0.03s 0.014% 99.67%      0.03s 0.014%  runtime.pidleget
         0     0% 99.67%      0.03s 0.014%  runtime.pidlegetSpinning
         0     0% 99.67%      0.03s 0.014%  runtime.readyWithTime
         0     0% 99.67%      0.03s 0.014%  runtime.stackpoolfree
         0     0% 99.67%      0.03s 0.014%  runtime.wakeNetpoll
     0.02s 0.0094% 99.68%      0.02s 0.0094%  github.com/AlexsanderHamir/GenPool/pool_test.cleaner
     0.02s 0.0094% 99.69%      0.02s 0.0094%  internal/runtime/atomic.(*Uintptr).Load (inline)
     0.02s 0.0094% 99.70%      0.02s 0.0094%  internal/runtime/atomic.(*UnsafePointer).StoreNoWB (inline)
         0     0% 99.70%      0.02s 0.0094%  runtime.(*activeSweep).end
     0.01s 0.0047% 99.70%      0.02s 0.0094%  runtime.(*gcControllerState).heapGoalInternal
     0.01s 0.0047% 99.71%      0.02s 0.0094%  runtime.(*gcControllerState).trigger
         0     0% 99.71%      0.02s 0.0094%  runtime.(*gcWork).tryGet
     0.02s 0.0094% 99.72%      0.02s 0.0094%  runtime.(*mLockProfile).recordUnlock
         0     0% 99.72%      0.02s 0.0094%  runtime.(*mcache).releaseAll
         0     0% 99.72%      0.02s 0.0094%  runtime.(*mheap).freeManual
         0     0% 99.72%      0.02s 0.0094%  runtime.(*mheap).grow
         0     0% 99.72%      0.02s 0.0094%  runtime.(*mheap).initSpan
         0     0% 99.72%      0.02s 0.0094%  runtime.(*mheap).nextSpanForSweep
     0.02s 0.0094% 99.73%      0.02s 0.0094%  runtime.(*mspan).markBitsForIndex (inline)
         0     0% 99.73%      0.02s 0.0094%  runtime.(*mspan).typePointersOfUnchecked
     0.02s 0.0094% 99.74%      0.02s 0.0094%  runtime.(*randomEnum).done (inline)
     0.01s 0.0047% 99.74%      0.02s 0.0094%  runtime.(*spanSet).pop
     0.02s 0.0094% 99.75%      0.02s 0.0094%  runtime.(*timer).needsAdd (inline)
         0     0% 99.75%      0.02s 0.0094%  runtime.callers
     0.01s 0.0047% 99.75%      0.02s 0.0094%  runtime.callers.func1
         0     0% 99.75%      0.02s 0.0094%  runtime.funcspdelta (inline)
         0     0% 99.75%      0.02s 0.0094%  runtime.gcMarkDone.func1
         0     0% 99.75%      0.02s 0.0094%  runtime.gcTrigger.test
     0.02s 0.0094% 99.76%      0.02s 0.0094%  runtime.getGCMask (inline)
     0.01s 0.0047% 99.77%      0.02s 0.0094%  runtime.globrunqget
     0.02s 0.0094% 99.78%      0.02s 0.0094%  runtime.libcCall
     0.02s 0.0094% 99.79%      0.02s 0.0094%  runtime.mmap
     0.02s 0.0094% 99.80%      0.02s 0.0094%  runtime.pthread_mutex_lock
     0.02s 0.0094% 99.81%      0.02s 0.0094%  runtime.puintptr.ptr (inline)
     0.02s 0.0094% 99.82%      0.02s 0.0094%  runtime.readgstatus (inline)
         0     0% 99.82%      0.02s 0.0094%  runtime.startTheWorldWithSema
         0     0% 99.82%      0.02s 0.0094%  runtime.sysMap
         0     0% 99.82%      0.02s 0.0094%  runtime.sysMapOS
     0.02s 0.0094% 99.83%      0.02s 0.0094%  runtime.traceEnabled (inline)
         0     0% 99.83%      0.01s 0.0047%  github.com/AlexsanderHamir/GenPool/pool.(*PoolFields[go.shape.struct { Name string; Data []uint8; github.com/AlexsanderHamir/GenPool/pool_test._ [24]uint8; PoolFields = github.com/AlexsanderHamir/GenPool/pool.PoolFields[github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject] }]).IncrementUsage
         0     0% 99.83%      0.01s 0.0047%  github.com/AlexsanderHamir/GenPool/pool.(*PoolFields[go.shape.struct { Name string; Data []uint8; github.com/AlexsanderHamir/GenPool/pool_test._ [24]uint8; PoolFields = github.com/AlexsanderHamir/GenPool/pool.PoolFields[github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject] }]).SetNext
         0     0% 99.83%      0.01s 0.0047%  internal/runtime/atomic.(*Pointer[go.shape.struct { runtime.lfnode; runtime.popped internal/runtime/atomic.Uint32; runtime.spans [512]runtime.atomicMSpanPointer }]).StoreNoWB (inline)
     0.01s 0.0047% 99.83%      0.01s 0.0047%  internal/runtime/atomic.(*Uint32).Add (inline)
     0.01s 0.0047% 99.83%      0.01s 0.0047%  internal/runtime/atomic.(*Uint32).Load (inline)
     0.01s 0.0047% 99.84%      0.01s 0.0047%  internal/runtime/atomic.(*Uint64).Add (inline)
     0.01s 0.0047% 99.84%      0.01s 0.0047%  runtime.(*atomicHeadTailIndex).incTail
         0     0% 99.84%      0.01s 0.0047%  runtime.(*atomicMSpanPointer).StoreNoWB (inline)
         0     0% 99.84%      0.01s 0.0047%  runtime.(*consistentHeapStats).release
     0.01s 0.0047% 99.85%      0.01s 0.0047%  runtime.(*fixalloc).alloc
     0.01s 0.0047% 99.85%      0.01s 0.0047%  runtime.(*gQueue).pop (inline)
     0.01s 0.0047% 99.86%      0.01s 0.0047%  runtime.(*gcCPULimiterState).limiting (inline)
         0     0% 99.86%      0.01s 0.0047%  runtime.(*gcCPULimiterState).update
     0.01s 0.0047% 99.86%      0.01s 0.0047%  runtime.(*gcCPULimiterState).updateLocked
     0.01s 0.0047% 99.87%      0.01s 0.0047%  runtime.(*gcControllerState).addScannableStack (inline)
         0     0% 99.87%      0.01s 0.0047%  runtime.(*gcControllerState).heapGoal (inline)
     0.01s 0.0047% 99.87%      0.01s 0.0047%  runtime.(*gcControllerState).memoryLimitHeapGoal
         0     0% 99.87%      0.01s 0.0047%  runtime.(*gcControllerState).revise
         0     0% 99.87%      0.01s 0.0047%  runtime.(*gcControllerState).update
         0     0% 99.87%      0.01s 0.0047%  runtime.(*gcWork).init
     0.01s 0.0047% 99.88%      0.01s 0.0047%  runtime.(*guintptr).cas (inline)
     0.01s 0.0047% 99.88%      0.01s 0.0047%  runtime.(*lfstack).push
     0.01s 0.0047% 99.89%      0.01s 0.0047%  runtime.(*mSpanList).insert
         0     0% 99.89%      0.01s 0.0047%  runtime.(*mheap).allocMSpanLocked
     0.01s 0.0047% 99.89%      0.01s 0.0047%  runtime.(*moduledata).textAddr
     0.01s 0.0047% 99.90%      0.01s 0.0047%  runtime.(*mspan).heapBitsSmallForAddr
     0.01s 0.0047% 99.90%      0.01s 0.0047%  runtime.(*mspan).init
         0     0% 99.90%      0.01s 0.0047%  runtime.(*pageAlloc).alloc
     0.01s 0.0047% 99.91%      0.01s 0.0047%  runtime.(*pageAlloc).allocToCache
         0     0% 99.91%      0.01s 0.0047%  runtime.(*pageAlloc).find
     0.01s 0.0047% 99.91%      0.01s 0.0047%  runtime.(*pageAlloc).findMappedAddr
     0.01s 0.0047% 99.92%      0.01s 0.0047%  runtime.(*semaRoot).dequeue
         0     0% 99.92%      0.01s 0.0047%  runtime.(*stackScanState).getPtr
     0.01s 0.0047% 99.92%      0.01s 0.0047%  runtime.(*sweepLocker).tryAcquire
     0.01s 0.0047% 99.92%      0.01s 0.0047%  runtime.(*sysMemStat).add
         0     0% 99.92%      0.01s 0.0047%  runtime.(*timer).lock (inline)
     0.01s 0.0047% 99.93%      0.01s 0.0047%  runtime.(*timers).updateMinWhenHeap (inline)
     0.01s 0.0047% 99.93%      0.01s 0.0047%  runtime.(*unwinder).symPC
         0     0% 99.93%      0.01s 0.0047%  runtime.acquireSudog
         0     0% 99.93%      0.01s 0.0047%  runtime.adjustframe
         0     0% 99.93%      0.01s 0.0047%  runtime.casGToWaiting (inline)
         0     0% 99.93%      0.01s 0.0047%  runtime.casGToWaitingForGC
         0     0% 99.93%      0.01s 0.0047%  runtime.checkRunqsNoP
         0     0% 99.93%      0.01s 0.0047%  runtime.deductSweepCredit
     0.01s 0.0047% 99.94%      0.01s 0.0047%  runtime.fastexprand
     0.01s 0.0047% 99.94%      0.01s 0.0047%  runtime.findfunc
     0.01s 0.0047% 99.95%      0.01s 0.0047%  runtime.forEachG
         0     0% 99.95%      0.01s 0.0047%  runtime.forEachP (inline)
         0     0% 99.95%      0.01s 0.0047%  runtime.funcInfo.entry (inline)
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.funcMaxSPDelta
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.funcname (inline)
         0     0%   100%      0.01s 0.0047%  runtime.gcBgMarkWorker.func1
         0     0%   100%      0.01s 0.0047%  runtime.gcFlushBgCredit
         0     0%   100%      0.01s 0.0047%  runtime.gcMarkTermination.forEachP.func6
         0     0%   100%      0.01s 0.0047%  runtime.gcMarkTermination.func4
         0     0%   100%      0.01s 0.0047%  runtime.gcMarkTermination.func4.1
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.gcMarkWorkAvailable (inline)
         0     0%   100%      0.01s 0.0047%  runtime.gcResetMarkState
         0     0%   100%      0.01s 0.0047%  runtime.gcStart.func4
         0     0%   100%      0.01s 0.0047%  runtime.goexit1
         0     0%   100%      0.01s 0.0047%  runtime.isShrinkStackSafe (inline)
         0     0%   100%      0.01s 0.0047%  runtime.isSystemGoroutine
         0     0%   100%      0.01s 0.0047%  runtime.markrootFreeGStacks
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.netpollinited (inline)
         0     0%   100%      0.01s 0.0047%  runtime.newAllocBits (inline)
         0     0%   100%      0.01s 0.0047%  runtime.nextSample (inline)
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.nextslicecap (inline)
         0     0%   100%      0.01s 0.0047%  runtime.notetsleep
         0     0%   100%      0.01s 0.0047%  runtime.notetsleep_internal
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.procyield
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.pthread_cond_timedwait_relative_np
         0     0%   100%      0.01s 0.0047%  runtime.putempty
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.readvarint (inline)
         0     0%   100%      0.01s 0.0047%  runtime.releasep
     0.01s 0.0047%   100%      0.01s 0.0047%  runtime.releasepNoTrace
         0     0%   100%      0.01s 0.0047%  runtime.runqget (inline)
         0     0%   100%      0.01s 0.0047%  runtime.runqput
         0     0%   100%      0.01s 0.0047%  runtime.runqputslow
         0     0%   100%      0.01s 0.0047%  runtime.shrinkstack
         0     0%   100%      0.01s 0.0047%  runtime.stackcache_clear
         0     0%   100%      0.01s 0.0047%  runtime.startTheWorld.func1
         0     0%   100%      0.01s 0.0047%  runtime.step
         0     0%   100%      0.01s 0.0047%  runtime.tracebackPCs
         0     0%   100%      0.01s 0.0047%  runtime.trygetfull
     0.01s 0.0047%   100%      0.01s 0.0047%  sync/atomic.(*Int64).Add
         0     0%   100%      0.01s 0.0047%  sync/atomic.(*Pointer[go.shape.struct { Name string; Data []uint8; github.com/AlexsanderHamir/GenPool/pool_test._ [24]uint8; PoolFields = github.com/AlexsanderHamir/GenPool/pool.PoolFields[github.com/AlexsanderHamir/GenPool/pool_test.BenchmarkObject] }]).Store (inline)
     0.01s 0.0047%   100%      0.01s 0.0047%  sync/atomic.StorePointer
         0     0%   100%      0.01s 0.0047%  testing.(*B).run1.func1
